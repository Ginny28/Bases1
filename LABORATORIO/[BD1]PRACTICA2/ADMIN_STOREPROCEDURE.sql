
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,VIRGINIA CHAVARRÍA>
-- Create date: <Create Date,23-09-2015,>
-- Description:	<Description,STORED PROCEDURES,>
-- =============================================

--------------- EXTRA PROCEDURES ------------------

USE DB_PRACTICA2
GO

CREATE PROCEDURE RANDOMCARNE	
AS 
BEGIN 
	DECLARE @YR INT;DECLARE @UPPER INT;
	DECLARE @LOWER INT;DECLARE @num1 INT;
	DECLARE @num2 int;
 SET @YR = (SELECT AÑO FROM DBO.CONFIGURACION);
 SET @UPPER =10 ; SET @LOWER = 19;
 SELECT @num1 = CONCAT (@YR, (ROUND(((@UPPER - @LOWER -1)*RAND() + @LOWER),0)));
 SET @UPPER =100 ; SET @LOWER = 999;
 set @num1 = CONCAT (@num1 ,(ROUND(((@UPPER - @LOWER -1)*RAND() + @LOWER),0)));	
 set @num2 = (@num1);
 return @num2
END 
GO

CREATE PROCEDURE RANDOMWORKERID	
AS 
BEGIN 
	DECLARE @YR INT;DECLARE @UPPER INT;
	DECLARE @LOWER INT;DECLARE @num1 INT;
	DECLARE @num2 int;
 SET @YR = (SELECT AÑO FROM DBO.CONFIGURACION);
 SET @UPPER =20 ; SET @LOWER = 29;
 SELECT @num1 = CONCAT (@YR, (ROUND(((@UPPER - @LOWER -1)*RAND() + @LOWER),0)));
 SET @UPPER =100 ; SET @LOWER = 999;
 set @num1 = CONCAT (@num1 ,(ROUND(((@UPPER - @LOWER -1)*RAND() + @LOWER),0)));	
 set @num2 = (@num1);
 return @num2
END 
GO

CREATE PROCEDURE STATUSSELE 
@CURSO INT,
@STATUS INT
AS
DECLARE @QUERY INT = (SELECT SEMESTRE FROM CURSO WHERE ID_CURSO = @CURSO)
DECLARE @SA INT = (SELECT SEMESTRE FROM CONFIGURACION)
	IF @SA = 1
		IF (@QUERY%2)<>0
		BEGIN
			UPDATE CURSO SET STAT = @STATUS WHERE ID_CURSO = @CURSO;
		END
		ELSE
			PRINT 'ESE CURSO NO ES DEL SEMESTRE'
	
	ELSE 
		IF (@QUERY%2)=0
		BEGIN
			UPDATE CURSO SET STAT = @STATUS WHERE ID_CURSO = @CURSO;
		END
		ELSE
			PRINT 'ESE-CURSO NO ES DEL SEMESTRE'
GO



--------------- STORED PROCEDURE -----------------------

CREATE PROCEDURE ADDAREA 
@id int,
@nome varchar(20)
AS 
BEGIN
	SET NOCOUNT ON;
	DECLARE @COUNTING INT;
	SELECT @COUNTING = ( SELECT COUNT(*)  FROM AREA WHERE ID_AREA = @id);
	IF @COUNTING = 1
		PRINT 'ESE ID YA ESTA EN USO';
	ELSE
		INSERT INTO AREA (ID_AREA,NOMBRE) VALUES (@id,@nome);

END
GO

CREATE PROCEDURE ADDFACU
 @id int,
 @nome varchar(20)
AS 
BEGIN 
	SET NOCOUNT ON;
	DECLARE @COUNTING INT;
	SELECT @COUNTING = ( SELECT COUNT(*)  FROM FACULDADE WHERE ID_FAC = @id);
	IF @COUNTING = 1
		PRINT 'ESE ID YA ESTA EN USO';
	ELSE
		INSERT INTO FACULDADE(ID_FAC,NOMBRE) VALUES (@id,@nome);
END
GO

CREATE PROCEDURE ADDUSER @nombre varchar(50),@celular int, @birth date,@telefono int,@direccion varchar(30), @carrera varchar(30),@correio varchar(30)
AS 
BEGIN 
	SET NOCOUNT ON; 
	DECLARE @CARNE INT
	EXEC @CARNE = DBO.RANDOMCARNE
	DECLARE @COUNTING INT;
	SELECT @COUNTING = ( SELECT COUNT(*)  FROM ALUNO WHERE CARNE = @CARNE);
	IF @COUNTING = 1
		PRINT 'ESE CARNE YA ESTA EN USO';
	ELSE
		INSERT INTO ALUNO (CARNE,NOMBRE,CELULAR,BIRTH,TELEFONO,DIR,MAIL,CARRERA) VALUES (@CARNE,@nombre,@celular,@birth,@telefono,@direccion,@correio,@carrera);
		
END 
GO

CREATE PROCEDURE ADDWORKER @nombre varchar(50),@celular int, @birth date,@telefono int,@direccion varchar(30), @carrera varchar(30),@correio varchar(30)
AS 
BEGIN 
	SET NOCOUNT ON; 
	DECLARE @WID INT
	EXEC @WID = DBO.RANDOMWORKERID
	DECLARE @COUNTING INT;
	SELECT @COUNTING = ( SELECT COUNT(*)  FROM PROFESSOR WHERE ID_PROF = @WID);
	IF @COUNTING = 1
		PRINT 'ESE ID YA ESTA EN USO';
	ELSE
		INSERT INTO PROFESSOR(ID_PROF,NOMBRE,CELULAR,BIRTH,TELEFONO,DIR,MAIL,CARRERA) VALUES (@WID,@nombre,@celular,@birth,@telefono,@direccion,@correio,@carrera);

END 
GO

CREATE PROCEDURE ADDCOURSE 
@ID_CURSO INT,
@NOMBRE varchar(30),
@SEMESTRE INT,
@CREDITOS INT,
@PRE VARCHAR(50),
@POST VARCHAR(50),
@AREA INT,
@FAC INT
AS 
BEGIN 

IF @ID_CURSO >= 100 AND @ID_CURSO <=999
BEGIN
	DECLARE @YES INT = (SELECT COUNT(*) FROM CURSO WHERE ID_CURSO = @ID_CURSO);
	IF @YES =1
		PRINT 'ESE CURSO YA EXISTE'
	ELSE 
		INSERT INTO CURSO(ID_CURSO,NOMBRE,SEMESTRE,CREDITOS,STAT) VALUES (@ID_CURSO,@NOMBRE,@SEMESTRE,@CREDITOS,0)
		DECLARE @YES2 INT = (SELECT COUNT(*) FROM CURSO_FACU_AREA WHERE ID_CURSO = @ID_CURSO AND ID_AREA = @AREA AND ID_FAC =@FAC);
		IF @YES2 =1
			PRINT 'ESE CURSO YA TIENE ASIGNADA ESA FAC & AREA'
		ELSE
			INSERT INTO CURSO_FACU_AREA (ID_CURSO,ID_AREA,ID_FAC) VALUES(@ID_CURSO,@AREA,@FAC)
			DECLARE @YES3 INT = (SELECT COUNT(*) FROM PRE_POST WHERE ID_CURSO = @ID_CURSO AND ID_FAC =@FAC AND (PRE = @PRE OR PRE IS NULL) AND (POST = @POST OR POST IS NULL));
			IF @YES3 =1
			BEGIN 
			 PRINT 'YA TIENE ESE PRE Y POST '
			END
			ELSE
				INSERT INTO PRE_POST(ID_CURSO,ID_FAC,PRE,POST) VALUES( @ID_CURSO,@FAC,@PRE,@POST)
			
END
ELSE 
    PRINT 'CODIGO INCORRECTO INGRESE UN NUMERO [100-999]'
		
		
END 
GO


CREATE PROCEDURE EDITSTATUS
@CURSO INT = 107,
@STATUS INT = 1
AS
BEGIN
DECLARE @SA INT = (SELECT SEMESTRE FROM CONFIGURACION)

IF @STATUS = 1
BEGIN
	EXEC DBO.STATUSSELE @CURSO,@STATUS
	
END
IF @STATUS = 2
BEGIN
	DECLARE @CAT INT = (SELECT COUNT(*) FROM HORARIO WHERE ID_CURSO = @CURSO)
				IF @CAT=1
				BEGIN
					EXEC DBO.STATUSSELE @CURSO,@STATUS
				END 
				ELSE
				PRINT 'ESE CURSO NO TIENE ASIGNADO SALON , HORA O CATEDRATICO'
END
END
GO

CREATE PROCEDURE ADDSPH
@ID_CURSO INT,
@HORAI INT,
@HORAF INT,
@DIA VARCHAR (10),
@SALON INT,
@ID_WID INT
AS
BEGIN
DECLARE @STATUS INT = (SELECT STAT FROM CURSO WHERE ID_CURSO = @ID_CURSO)
IF @STATUS = 1 
BEGIN
	DECLARE @TIME INT = @HORAF - @HORAI
	IF @TIME = 2
	BEGIN
		DECLARE @TIM VARCHAR(10)= CONCAT(@HORAI,':00 -',@HORAF,':00')
		IF (@SALON BETWEEN 101 AND 120) OR (@SALON BETWEEN 201 AND 220) OR (@SALON BETWEEN 301 AND 320) OR (@SALON BETWEEN 401 AND 420) OR (@SALON BETWEEN 501 AND 520)
		BEGIN
			 DECLARE @VA INT = (SELECT COUNT(*) FROM HORARIO WHERE ID_CURSO = @ID_CURSO AND HORA=@TIM AND DIA=@DIA AND ID_CATE = @ID_WID AND SALON=@SALON)
				IF @VA = 1
				BEGIN 
					PRINT 'ESE HORARIO YA EXISTE'
				END 
				ELSE 
					INSERT INTO HORARIO (ID_CURSO,HORA,DIA,SALON,ID_CATE) VALUES (@ID_CURSO,@TIM,@DIA,@SALON,@ID_WID)
		END		
		ELSE 
			PRINT 'SALON INEXISTENTE'
		
	END
	ELSE
		PRINT 'EL HORARIO ES MAYOR A 2 HORAS'
END
ELSE 
	
	PRINT 'EL CURSO NO ESTA HABILITADO'

END
GO

--------------------------------------STORED PROCEDURES STUDENTS ------------------------------------------------

CREATE PROCEDURE VIEWCOURSES
 @ID INT 
 as
BEGIN
DROP VIEW V1
DROP VIEW V2
DECLARE @FAC INT = (SELECT CARRERA FROM ALUNO WHERE CARNE = @ID)

declare @sql varchar(max)
select @sql = CONCAT( 'CREATE VIEW V1 AS 
SELECT A.ID_CURSO , A.NOMBRE FROM CURSO A INNER JOIN CURSO_FACU_AREA B 
ON  A.ID_CURSO = B.ID_CURSO AND A.STAT = 2 AND B.ID_FAC =',@FAC)

exec (@sql)

DECLARE @VIEW2 VARCHAR(max) =  'CREATE VIEW V2 
AS SELECT V1.ID_CURSO,V1.NOMBRE,ID_HORARIO,HORA,DIA,SALON FROM V1 
		INNER JOIN HORARIO
		ON V1.ID_CURSO = HORARIO.ID_CURSO'

exec (@VIEW2)

select * from V2

END
go



CREATE PROC ASIGCOURSE
@CURSO INT ,
@CARNE INT,
@HORARIO INT
AS 
BEGIN 
DECLARE @VA INT
DECLARE @GYR INT = (SELECT AÑO FROM CONFIGURACION)
DECLARE @GSM INT = (SELECT SEMESTRE FROM CONFIGURACION)
DECLARE @O INT = (SELECT COUNT(ID_HORAR) FROM ASIGNACION WHERE ID_EST = @CARNE)
IF @O IS NULL 
BEGIN 
	DECLARE CUS CURSOR STATIC
	FOR SELECT ID_HORARIO FROM V2 WHERE ID_CURSO = @CURSO
	OPEN CUS
	FETCH CUS INTO @VA
	WHILE (@@FETCH_STATUS = 0)
	BEGIN
		IF @HORARIO = @VA
				BEGIN
					INSERT INTO ASIGNACION (ID_EST, ID_HORAR,AÑO,SEMESTRE) VALUES ( @CARNE , @VA,@GSM,@GYR)
				break
				END
		FETCH  CUS INTO @VA
	END
	CLOSE CUS
	DEALLOCATE CUS
END
ELSE 
		DECLARE @P INT = (SELECT COUNT(*) FROM ASIGNACION WHERE ID_HORAR = @HORARIO)
		SELECT @P AS CURSO
		IF @P = 1
			BEGIN
				PRINT 'ESE CURSO YA LO TIENE ASIGNADO' 
			END	
		IF @P = 0
			BEGIN
			PRINT 'ESE CURSO NO LO TIENE ASIGNADO'	
			
				 INSERT INTO ASIGNACION (ID_EST, ID_HORAR,AÑO,SEMESTRE) VALUES ( @CARNE,@HORARIO,@GSM,@GYR)

			END
END
GO	

CREATE PROC  VIEWXML
@CARNE INT
AS
BEGIN	
	DROP VIEW XMLTABLE 
	DECLARE @TABLE VARCHAR (MAX) = CONCAT('CREATE VIEW XMLTABLE AS SELECT A.ID_EST,C.NOMBRE , B.ID_CURSO, A.AÑO , A.SEMESTRE, C.CREDITOS,  (A.FINAL + A.ZONA) AS NOTA
	 FROM ASIGNACION A INNER JOIN HORARIO B 
	ON A.ID_HORAR = B.ID_HORARIO INNER JOIN CURSO C 
	 ON B.ID_CURSO = C.ID_CURSO 
	 WHERE A.ID_EST =', @CARNE, ' AND (A.FINAL + A.ZONA) >= 70')
	--Print @TABLE
	EXEC (@TABLE)

    DECLARE @XML1 XML ;
	SELECT * FROM XMLTABLE

	SET @XML1 = ( SELECT NOMBRE,ID_CURSO AS CODIGO ,AÑO,SEMESTRE FROM XMLTABLE FOR XML RAW('CURSO'), ROOT('CURSOS'),ELEMENTS )

	DECLARE @OUTRO XML ;
	
	SET @OUTRO = (SELECT SUM(CREDITOS) AS CREDITOS ,AVG(NOTA) AS PROMEDIO FROM XMLTABLE FOR XML PATH(''),ELEMENTS)

	SELECT @XML1 ,@OUTRO FOR XML PATH('')
END 
GO




--------------------------------------STORED PROCEDURES TEACHERS ------------------------------------------------


CREATE PROC UPDATENOTES
@WID INT,
@ZONA INT, 
@FINAL INT,
@CARNE INT,
@CODIGO INT
AS
DROP VIEW HORARI
DECLARE @HO VARCHAR(max) = CONCAT('CREATE VIEW HORARI AS SELECT ID_HORARIO FROM HORARIO WHERE ID_CATE = ', @WID)
EXEC(@HO)
SELECT * FROM HORARI
DECLARE @VA INT
DECLARE CU CURSOR STATIC
FOR SELECT ID_HORARIO FROM HORARI
OPEN CU
FETCH CU INTO @VA
WHILE (@@FETCH_STATUS = 0)
BEGIN
	PRINT @VA
	DECLARE @SS INT
	SET @SS = (SELECT COUNT(*) FROM ASIGNACION WHERE ID_HORAR = @VA AND ID_EST= @CARNE AND ID_ASIGNACAO = @CODIGO)
	PRINT @SS
	IF @SS <> 0
	 BEGIN
		
		IF @ZONA BETWEEN 0 AND 75 
		BEGIN
				UPDATE ASIGNACION SET ZONA = @ZONA WHERE ID_ASIGNACAO = @CODIGO AND ID_EST= @CARNE; 
		END
		ELSE 
				PRINT 'LA ZONA DEBE ESTAR EN UN RANGO DE 0 - 75'

		IF @FINAL BETWEEN 0 AND 25 
		BEGIN
			IF @ZONA >= 45 
			BEGIN
				UPDATE ASIGNACION SET FINAL = @FINAL WHERE ID_ASIGNACAO = @CODIGO AND ID_EST= @CARNE; 
			END
			ELSE 
				PRINT 'NO TIENE DERECHO A FINAL PQ SU ZONA ES < 45'
			
		END
		ELSE 
			PRINT 'LA NOTA  DEBE ESTAR EN UN RANGO DE 0 - 25'
	END
	FETCH CU INTO @VA
END
CLOSE CU
DEALLOCATE CU
GO
 SELECT * FROM HORARI